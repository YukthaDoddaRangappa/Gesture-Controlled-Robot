#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;

// Motor pins
const int motorLeftForward = 4;
const int motorLeftBackward = 5;
const int motorRightForward = 6;
const int motorRightBackward = 7;

void setup() {
  Serial.begin(9600);
  Wire.begin();
  mpu.initialize();

  // Check if MPU6050 is connected
  if (mpu.testConnection()) {
    Serial.println("MPU6050 connected successfully");
  } else {
    Serial.println("MPU6050 connection failed");
    while (1);
  }

  // Initialize motor pins
  pinMode(motorLeftForward, OUTPUT);
  pinMode(motorLeftBackward, OUTPUT);
  pinMode(motorRightForward, OUTPUT);
  pinMode(motorRightBackward, OUTPUT);
}

void loop() {
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  // Map accelerometer readings to directions
  int xTilt = map(ax, -17000, 17000, -100, 100);
  int yTilt = map(ay, -17000, 17000, -100, 100);

  // Debugging
  Serial.print("X tilt: "); Serial.print(xTilt);
  Serial.print(" | Y tilt: "); Serial.println(yTilt);

  // Forward/Backward
  if (yTilt > 30) {
    moveForward();
  } else if (yTilt < -30) {
    moveBackward();
  } 
  // Left/Right
  else if (xTilt > 30) {
    turnRight();
  } else if (xTilt < -30) {
    turnLeft();
  } else {
    stopMotors();
  }

  delay(100);
}

void moveForward() {
  digitalWrite(motorLeftForward, HIGH);
  digitalWrite(motorLeftBackward, LOW);
  digitalWrite(motorRightForward, HIGH);
  digitalWrite(motorRightBackward, LOW);
}

void moveBackward() {
  digitalWrite(motorLeftForward, LOW);
  digitalWrite(motorLeftBackward, HIGH);
  digitalWrite(motorRightForward, LOW);
  digitalWrite(motorRightBackward, HIGH);
}

void turnLeft() {
  digitalWrite(motorLeftForward, LOW);
  digitalWrite(motorLeftBackward, HIGH);
  digitalWrite(motorRightForward, HIGH);
  digitalWrite(motorRightBackward, LOW);
}

void turnRight() {
  digitalWrite(motorLeftForward, HIGH);
  digitalWrite(motorLeftBackward, LOW);
  digitalWrite(motorRightForward, LOW);
  digitalWrite(motorRightBackward, HIGH);
}

void stopMotors() {
  digitalWrite(motorLeftForward, LOW);
  digitalWrite(motorLeftBackward, LOW);
  digitalWrite(motorRightForward, LOW);
  digitalWrite(motorRightBackward, LOW);
}
